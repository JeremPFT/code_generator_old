<HEAD><TITLE>model-parameter.adb</TITLE></HEAD>
<BODY>
<HR><DIV ALIGN="center"><H1> File : model-parameter.adb </H1></DIV><HR>
<PRE>
<b>with</b> Ada.Text_IO;

<b>package</b> <b>body</b> Model.Parameter <b>is</b>

  <FONT COLOR=green><EM>--  type Object_T is abstract new Named_Element.Object_T with private;</EM></FONT>

  <FONT COLOR=green><EM>--  type Reference_T is access all Object_T;</EM></FONT>

  <FONT COLOR=green><EM>--  type Class_T is access all Object_T'Class;</EM></FONT>

  <FONT COLOR=green><EM>--  package Vectors is new Ada.Containers.Vectors</EM></FONT>
  <FONT COLOR=green><EM>--    (Element_Type =&gt; Class_T,</EM></FONT>
  <FONT COLOR=green><EM>--     Index_Type   =&gt; Positive);</EM></FONT>

  <FONT COLOR=green><EM>--  subtype Vector_T is Vectors.Vector;</EM></FONT>

  <FONT COLOR=green><EM>--  type Param_Mode_T is</EM></FONT>
  <FONT COLOR=green><EM>--    (P_Mode_In,</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_Out,</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_In_Out,</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_Access,</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_Access_Constant,</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_Not_Null_Access,</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_Not_Null_Access_Constant);</EM></FONT>

  <FONT COLOR=green><EM>--  type Object_T is</EM></FONT>
  <FONT COLOR=green><EM>--    new Named_Element_T with record</EM></FONT>
  <FONT COLOR=green><EM>--      Of_Type       : access String := null;</EM></FONT>
  <FONT COLOR=green><EM>--      Default_Value : access String := null;</EM></FONT>
  <FONT COLOR=green><EM>--      Mode          : Param_Mode_T  := P_Mode_In;</EM></FONT>
  <FONT COLOR=green><EM>--    end record;</EM></FONT>

  <FONT COLOR=green><EM>--  type Mode_Str_T is</EM></FONT>
  <FONT COLOR=green><EM>--    array (Param_Mode_T) of String_Ref;</EM></FONT>

  <FONT COLOR=green><EM>--  not overriding</EM></FONT>
  <FONT COLOR=green><EM>--  function "+"(Text : in String) return String_Ref</EM></FONT>
  <FONT COLOR=green><EM>--    is</EM></FONT>
  <FONT COLOR=green><EM>--    (new String'(Text));</EM></FONT>

  <FONT COLOR=green><EM>--  Mode_Str : constant Mode_Str_T :=</EM></FONT>
  <FONT COLOR=green><EM>--    (</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_In                       =&gt; +"in",</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_Out                      =&gt; +"out",</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_In_Out                   =&gt; +"in out",</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_Access                   =&gt; +"access",</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_Access_Constant          =&gt; +"access constant",</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_Not_Null_Access          =&gt; +"not null access",</EM></FONT>
  <FONT COLOR=green><EM>--     P_Mode_Not_Null_Access_Constant =&gt; +"not null access constant"</EM></FONT>
  <FONT COLOR=green><EM>--    );</EM></FONT>

  <b>function</b> Create
    (Name           : <b>in</b> String;
     Of_Type        : <b>in</b> String;
     Default_Value  : <b>in</b> String           := "";
     Mode           : <b>in</b> Param_Mode_T     := P_Mode_In;
     Owned_Comments : <b>in</b> Comment.Vector_T := Comment.Vectors.Empty_Vector)
    <b>return</b> <b>not</b> <b>null</b> <b>access</b> Object_T'Class
  <b>is</b>
    Of_Type_Val : <b>constant</b> <b>access</b> String :=
      (<b>if</b> Of_Type /= "" <b>then</b>
         <b>new</b> String'(Of_Type)
       <b>else</b> <b>null</b>);

    Default_Value_Val : <b>constant</b> <b>access</b> String :=
      (<b>if</b> Default_Value /= "" <b>then</b>
         <b>new</b> String'(Default_Value)
       <b>else</b> <b>null</b>);

    Obj_Parameter : <b>constant</b> <b>access</b> Object_T :=
      <b>new</b> Object_T'(Named_Element.Object_T <b>with</b>
                    Of_Type       =&gt; Of_Type_Val,
                    Default_Value =&gt; Default_Value_Val,
                    Mode          =&gt; Mode);
  <b>begin</b>
    Obj_Parameter.Set_Name (Name);
    <b>return</b> Obj_Parameter;
  <b>end</b> Create;

  <FONT COLOR=green><EM>--  procedure Set_Type</EM></FONT>
  <FONT COLOR=green><EM>--    (Self  : in out Object_T;</EM></FONT>
  <FONT COLOR=green><EM>--     Value : in     String)</EM></FONT>
  <FONT COLOR=green><EM>--  is</EM></FONT>
  <FONT COLOR=green><EM>--  begin</EM></FONT>
  <FONT COLOR=green><EM>--    Self.Of_Type := new String'(Value);</EM></FONT>
  <FONT COLOR=green><EM>--  end Set_Type;</EM></FONT>

  <FONT COLOR=green><EM>--  procedure Set_Default_Value</EM></FONT>
  <FONT COLOR=green><EM>--    (Self  : in out Object_T;</EM></FONT>
  <FONT COLOR=green><EM>--     Value : in     String)</EM></FONT>
  <FONT COLOR=green><EM>--  is</EM></FONT>
  <FONT COLOR=green><EM>--  begin</EM></FONT>
  <FONT COLOR=green><EM>--    Self.Default_Value := new String'(Value);</EM></FONT>
  <FONT COLOR=green><EM>--  end Set_Default_Value;</EM></FONT>

<b>begin</b>

  <b>declare</b>
    <b>package</b> T_IO <b>renames</b> Ada.Text_IO;
    Obj_Comment : <b>constant</b> <b>access</b> Object_T := Create
      (Name          =&gt; "parameter_a",
       Of_Type       =&gt; "type_a",
       Default_Value =&gt; "aaa");
  <b>begin</b>
    T_IO.New_Line;
    T_IO.Put_Line ("<FONT COLOR=green><EM>--------------------------------");</EM></FONT>
    T_IO.Put_Line ("debut des tests de model.parameter");
    T_IO.New_Line;
    T_IO.Put_Line ("parametre créé : ");
    T_IO.Put_Line (Obj_Comment.Get_Name);
  <b>end</b>;

<b>end</b> Model.Parameter;
</PRE></BODY></HTML>
