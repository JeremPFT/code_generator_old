<HEAD><TITLE>model-subprogram.ads</TITLE></HEAD>
<BODY>
<HR><DIV ALIGN="center"><H1> File : model-subprogram.ads </H1></DIV><HR>
<PRE>
<b>with</b> Ada.Containers.Vectors;

<b>limited</b> <b>with</b> Model.Package_Def;
<b>with</b> Model.Named_Element;
<b>with</b> Model.Comment;

<b>package</b> Model.Subprogram <b>is</b>

  <b>type</b> Object_T
    (Owner_Package : <b>access</b> Package_Def.Object_T'Class)
    <b>is</b>
    <b>new</b> Named_Element.Object_T <b>with</b> <b>private</b>;

  <b>type</b> Reference_T <b>is</b> <b>access</b> <b>all</b> Object_T;

  <b>type</b> Class_T <b>is</b> <b>access</b> <b>all</b> Object_T'Class;

  <b>package</b> Vectors <b>is</b> <b>new</b> Ada.Containers.Vectors
    (Element_Type =&gt; Class_T,
     Index_Type   =&gt; Positive);

  <b>subtype</b> Vector_T <b>is</b> Vectors.Vector;

  <b>function</b> Create
    (Owner_Package  : <b>access</b> Package_Def.Object_T'Class;
     Name           : <b>in</b>     String;
     Of_Type        : <b>in</b>     String           := "";
     Is_Abstract    : <b>in</b>     Boolean          := False;
     Is_Separate    : <b>in</b>     Boolean          := False;
     Owned_Comments : <b>in</b>     Comment.Vector_T := Comment.Vectors.Empty_Vector)
    <b>return</b> <b>not</b> <b>null</b> <b>access</b> Object_T'Class;

  <b>not</b> overriding
  <b>procedure</b> Set_Type
    (Self  : <b>in</b> <b>out</b> Object_T;
     Value : <b>in</b>     String);

  <b>not</b> overriding
  <b>function</b> Get_Type
    (Self : <b>in</b> Object_T)
    <b>return</b> String;

  <b>not</b> overriding
  <b>function</b> Has_Return
    (Self : <b>in</b> Object_T)
    <b>return</b> Boolean;

<b>private</b>

  <b>type</b> Object_T (Owner_Package : <b>access</b> Package_Def.Object_T'Class)
    <b>is</b> <b>new</b> Named_Element.Object_T
    <b>with</b> <b>record</b>
      Of_Type     : <b>access</b> String := <b>null</b>;
      Is_Abstract : Boolean       := False;
      Is_Separate : Boolean       := False;
      <FONT COLOR=green><EM>--  Parameters  : Parameter_Vector := Parameter_Vectors.Empty_Vector;</EM></FONT>

      <FONT COLOR=green><EM>--  Declarations : String_Vector := String_Vectors.Empty_Vector;</EM></FONT>
      <FONT COLOR=green><EM>--  Instructions : String_Vector := String_Vectors.Empty_Vector;</EM></FONT>
    <b>end</b> <b>record</b>;

  <b>function</b> Get_Type
    (Self : <b>in</b> Object_T)
    <b>return</b> String
    <b>is</b>
    (Self.Of_Type.<b>all</b>);

  <b>function</b> Has_Return
    (Self : <b>in</b> Object_T)
    <b>return</b> Boolean
    <b>is</b>
    (Self.Of_Type.<b>all</b> /= "");

<b>end</b> Model.Subprogram;
</PRE></BODY></HTML>
