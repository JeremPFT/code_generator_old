<HEAD><TITLE>model-interface_def.ads</TITLE></HEAD>
<BODY>
<HR><DIV ALIGN="center"><H1> File : model-interface_def.ads </H1></DIV><HR>
<PRE>
<b>with</b> Ada.Containers.Vectors;

<b>with</b> Model.Type_Def;
<b>limited</b> <b>with</b> Model.Package_Def;
<b>with</b> Model.Subprogram;
<b>with</b> Model.Comment;

<b>package</b> Model.Interface_Def <b>is</b>

  <b>type</b> Object_T <b>is</b> <b>new</b> Type_Def.Object_T <b>with</b> <b>private</b>;

  <b>type</b> Reference_T <b>is</b> <b>access</b> <b>all</b> Object_T;

  <b>type</b> Class_T <b>is</b> <b>access</b> <b>all</b> Object_T'Class;

  <b>package</b> Vectors <b>is</b> <b>new</b> Ada.Containers.Vectors
    (Element_Type =&gt; Class_T,
     Index_Type   =&gt; Positive);

  <b>subtype</b> Vector_T <b>is</b> Vectors.Vector;

  <b>function</b> Create
    (Owner_Package     : <b>not</b> <b>null</b> <b>access</b> Package_Def.Object_T'Class;
     Name              : <b>in</b>              String;
     Parent_Interfaces : <b>in</b>              Vector_T         :=
       Vectors.Empty_Vector;
     Owned_Comments    : <b>in</b>              Comment.Vector_T :=
       Comment.Vectors.Empty_Vector)
    <b>return</b> <b>not</b> <b>null</b> <b>access</b> Object_T'Class;

  <b>not</b> overriding
  <b>function</b> Has_Parent_Interfaces
    (Self : <b>in</b> Object_T)
    <b>return</b> Boolean;

  <b>not</b> overriding
  <b>function</b> Number_Of_Parent_Interfaces
    (Self : <b>in</b> Object_T)
    <b>return</b> Natural;

  <b>not</b> overriding
  <b>function</b> Get_Parent_Interface
    (Self  : <b>in</b> Object_T;
     Index : <b>in</b> Positive)
    <b>return</b> <b>access</b> Object_T'Class;

  <b>not</b> overriding
  <b>procedure</b> Add_Parent_Interface
    (Self   : <b>in</b> <b>out</b> Object_T;
     Parent : <b>access</b> Object_T);

  <b>not</b> overriding
  <b>function</b> Has_Public_Subprograms
    (Self : <b>in</b> Object_T)
    <b>return</b> Boolean;

  <b>not</b> overriding
  <b>function</b> Number_Of_Public_Subprograms
    (Self : <b>in</b> Object_T)
    <b>return</b> Natural;

  <b>not</b> overriding
  <b>function</b> Get_Public_Subprogram
    (Self  : <b>in</b> Object_T;
     Index : <b>in</b> Positive)
    <b>return</b> <b>access</b> Subprogram.Object_T'Class;

  <b>not</b> overriding
  <b>procedure</b> Add_Public_Subprogram
    (Self   : <b>in</b> <b>out</b> Object_T;
     Object : <b>access</b> Subprogram.Object_T);

<b>private</b>

  <b>type</b> Object_T <b>is</b>
    <b>new</b> Type_Def.Object_T <b>with</b>
    <b>record</b>
      Parent_Interfaces  : Vector_T            :=
        Vectors.Empty_Vector;
      Public_Subprograms : Subprogram.Vector_T :=
        Subprogram.Vectors.Empty_Vector;
    <b>end</b> <b>record</b>;

  <b>function</b> Has_Parent_Interfaces
    (Self : <b>in</b> Object_T)
    <b>return</b> Boolean
    <b>is</b>
    (<b>not</b> Self.Parent_Interfaces.Is_Empty);

  <b>function</b> Number_Of_Parent_Interfaces
    (Self : <b>in</b> Object_T)
    <b>return</b> Natural
    <b>is</b>
    (Natural (Self.Parent_Interfaces.Length));

  <b>function</b> Get_Parent_Interface
    (Self  : <b>in</b> Object_T;
     Index : <b>in</b> Positive)
    <b>return</b> <b>access</b> Object_T'Class
    <b>is</b>
    (Self.Parent_Interfaces (Index));

  <b>function</b> Has_Public_Subprograms
    (Self : <b>in</b> Object_T)
    <b>return</b> Boolean
    <b>is</b>
    (<b>not</b> Self.Public_Subprograms.Is_Empty);

  <b>function</b> Number_Of_Public_Subprograms
    (Self : <b>in</b> Object_T)
    <b>return</b> Natural
    <b>is</b>
    (Natural (Self.Public_Subprograms.Length));

  <b>function</b> Get_Public_Subprogram
    (Self  : <b>in</b> Object_T;
     Index : <b>in</b> Positive)
    <b>return</b> <b>access</b> Subprogram.Object_T'Class
    <b>is</b>
    (Self.Public_Subprograms (Index));

<b>end</b> Model.Interface_Def;
</PRE></BODY></HTML>
