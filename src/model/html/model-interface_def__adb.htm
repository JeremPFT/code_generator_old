<HEAD><TITLE>model-interface_def.adb</TITLE></HEAD>
<BODY>
<HR><DIV ALIGN="center"><H1> File : model-interface_def.adb </H1></DIV><HR>
<PRE>
<b>with</b> Ada.Text_IO;

<b>with</b> Model.Package_Def;

<b>package</b> <b>body</b> Model.Interface_Def <b>is</b>

  <b>function</b> Create
    (Owner_Package     : <b>not</b> <b>null</b> <b>access</b> Package_Def.Object_T'Class;
     Name              : <b>in</b>              String;
     Parent_Interfaces : <b>in</b>              Vector_T         :=
       Vectors.Empty_Vector;
     Owned_Comments    : <b>in</b>              Comment.Vector_T :=
       Comment.Vectors.Empty_Vector)
    <b>return</b> <b>not</b> <b>null</b> <b>access</b> Object_T'Class
  <b>is</b>
    Obj_Interface : <b>constant</b> <b>access</b> Object_T :=
      <b>new</b> Object_T'(Type_Def.Object_T
                    <b>with</b>
                    Owner_Package =&gt; Owner_Package,
                    <b>others</b>        =&gt; &lt;&gt;);
  <b>begin</b>
    Obj_Interface.Set_Name (Name);
    <b>return</b> Obj_Interface;
  <b>end</b> Create;

  <b>procedure</b> Add_Parent_Interface
    (Self   : <b>in</b> <b>out</b> Object_T;
     Parent : <b>access</b> Object_T)
  <b>is</b>
  <b>begin</b>
    Self.Parent_Interfaces.Append (Parent);
  <b>end</b> Add_Parent_Interface;

  <b>procedure</b> Add_Public_Subprogram
    (Self   : <b>in</b> <b>out</b> Object_T;
     Object : <b>access</b> Subprogram.Object_T)
  <b>is</b>
  <b>begin</b>
    Self.Public_Subprograms.Append (Object);
  <b>end</b> Add_Public_Subprogram;

<b>begin</b>

  <b>declare</b>
    <b>package</b> T_IO <b>renames</b> Ada.Text_IO;

    Obj_Package : <b>constant</b> <b>access</b> Package_Def.Object_T :=
      Package_Def.Create (Name =&gt; "package_a");

    Obj_Interface_A : <b>constant</b> <b>access</b> Object_T :=
      Create (Owner_Package =&gt; Obj_Package,
              Name          =&gt; "interface_a");
    Obj_Interface_B : <b>constant</b> <b>access</b> Object_T :=
      Create (Owner_Package =&gt; Obj_Package,
              Name          =&gt; "interface_b");
    Obj_Interface_C : <b>constant</b> <b>access</b> Object_T :=
      Create (Owner_Package =&gt; Obj_Package,
              Name          =&gt; "interface_c");
    Obj_Interface_D : <b>constant</b> <b>access</b> Object_T :=
      Create (Owner_Package =&gt; Obj_Package,
              Name          =&gt; "interface_d");
  <b>begin</b>
    T_IO.New_Line;
    T_IO.Put_Line ("<FONT COLOR=green><EM>--------------------------------------");</EM></FONT>
    T_IO.Put_Line ("debut des tests de model.interface_def");
    T_IO.New_Line;
    T_IO.Put_Line ("interface créée");
    T_IO.Put_Line (Obj_Interface_A.Owner_Package.Get_Name &amp; "." &amp;
                     Obj_Interface_A.Get_Name);

    Obj_Interface_D.Add_Parent_Interface (Obj_Interface_A);
    Obj_Interface_D.Add_Parent_Interface (Obj_Interface_B);
    Obj_Interface_D.Add_Parent_Interface (Obj_Interface_C);

    <b>declare</b>
      Number : <b>constant</b> Natural :=
        Obj_Interface_D.Number_Of_Parent_Interfaces;
    <b>begin</b>
      T_IO.Put_Line ("# parents : " &amp; Number'Img);
    <b>end</b>;

    <b>for</b> I <b>in</b> 1 .. Obj_Interface_D.Number_Of_Parent_Interfaces <b>loop</b>
      <b>declare</b>
        Parent : <b>constant</b> <b>access</b> Object_T :=
          Obj_Interface_D.Get_Parent_Interface (I);
      <b>begin</b>
        T_IO.Put_Line ("parent " &amp; I'Img &amp; " : " &amp;
                         Parent.Owner_Package.Get_Name
                         &amp; "." &amp;
                         Parent.Get_Name);
      <b>end</b>;
    <b>end</b> <b>loop</b>;

  <b>end</b>;

<b>end</b> Model.Interface_Def;
</PRE></BODY></HTML>
